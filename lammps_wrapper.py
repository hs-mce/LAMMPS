import numpy as np
import os
from lammps import IPyLammps

def original_fs(A, d, rend):
    # Embedding function
    nrho = 10000
    drho = 7.5 * 0.1664185884538253E-02
    rho = np.arange(0, drho * nrho, drho)
    F_pot = -np.sqrt(rho)

    arr_fs = []
    for jj in range(1, 2001):
        ii = np.arange(5 * (jj - 1), 5 * jj)
        arr_fs.append(F_pot[ii])

    # Electron density parameters
    nr = 10000
    dr = rend / (nr - 1)
    rr = np.arange(0, rend + dr, dr)

    rho_pot = np.where(rr < d, A ** 2 * (rr - d) ** 2, 0)
    for jj in range(1, 2001):
        ii = np.arange(5 * (jj - 1), 5 * jj)
        arr_fs.append(rho_pot[ii])

    # Pair-potential parameters
    c = 4.20
    c0 = 1.2157373
    c1 = 0.0271471
    c2 = -0.1217350
    c3 = 0
    c4 = 0

    V_pair = np.where(rr < c, (rr - c) ** 2 * (c0 + c1 * rr + c2 * rr ** 2 + c3 * rr ** 3 + c4 * rr ** 4), 0)
    pair_pot = V_pair * rr
    for jj in range(1, 2001):
        ii = np.arange(5 * (jj - 1), 5 * jj)
        arr_fs.append(pair_pot[ii])

    # Writing data to file
    data_out_file_name = 'Ta_orig_FS.eam2.alloy'
    with open(data_out_file_name, 'w') as data_out_file_ID:
        data_out_file_ID.write('Ta2 EAM/FS model\n')
        data_out_file_ID.write('Original finnis and sinclair parameters\n')
        data_out_file_ID.write('Generated by Python\n')
        data_out_file_ID.write('1  Ta\n')
        data_out_file_ID.write('10000  1.2481394134037E-02  10000  5.000500050005001e-04  0.4200000E+01\n')
        data_out_file_ID.write('73     180.95         3.304    bcc\n')

        for data in arr_fs:
            data_out_file_ID.write(' '.join(map(str, data)) + '\n')


def post_process_script(Nfile=1001, startfile=0, fileinc=2000, y_org=85.8404, z_org=25.6991):
    KE = np.zeros(Nfile)
    PE = np.zeros(Nfile)
    ke_disc = np.zeros(Nfile)
    pe_disc = np.zeros(Nfile)

    for filecount in range(Nfile):
        currentfile = startfile + (filecount - 1) * fileinc
        textFileName = f"output-{currentfile}.txt"
        if os.path.exists(textFileName):
            data = np.loadtxt(textFileName, skiprows=9)

            Natoms = data.shape[0]
            ke = np.sum(data[:, 6])  # Assuming data is 0-indexed
            pe = np.sum(data[:, 7])

            for line in range(Natoms):
                id = data[line, 0]
                x = data[line, 2]
                y = data[line, 3]
                z = data[line, 4]
                y_new = y - y_org
                z_new = z - z_org
                r = np.sqrt(y_new ** 2 + z_new ** 2)

                # Calculate quantities around dislocation
                # if r <= 5:
                #     ke_disc[filecount] += data[line, 6]
                #     pe_disc[filecount] += data[line, 7]

        else:
            print(f"File {textFileName} does not exist.")

        KE[filecount] = ke
        PE[filecount] = pe

    dt = 0.002 * 500
    time = np.arange(0, 1001 * dt, dt)

    return KE, PE, ke_disc, pe_disc, time

# Define constants
A = 2.591061
d = 4.076980
rend = 5
input_array = np.array([A, d, rend])
pert = 1.0e-2

# Initialize LAMMPS instance
lmp = IPyLammps()

# Call original_fs and post_process_script functions
# original_fs(A, d, rend)
# lmp.file("in.elastic")
KE, PE, ke_disc, pe_disc, time = post_process_script()

# Saving the values without perturbation
KE_0 = KE
PE_0 = PE

KE_pert = np.zeros((len(input_array), len(KE)))
PE_pert = np.zeros((len(input_array), len(PE)))

for i in range(len(input_array)):
    perturbation_of_param = pert * input_array[i]
    input_array[i] = input_array[i] + perturbation_of_param

    # Update params
    A = input_array[0]
    d = input_array[1]
    rend = input_array[2]

    # Compute the new KE, PE
    original_fs(A, d, rend)
    lmp.file("in.elastic")
    post_process_script()

    # Getting derivatives
    KE_pert[i, :] = (KE - KE_0) / perturbation_of_param
    PE_pert[i, :] = (PE - PE_0) / perturbation_of_param

    input_array[i] = input_array[i] - perturbation_of_param

# Clean up LAMMPS instance
lmp.close()
